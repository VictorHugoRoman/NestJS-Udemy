 --Seccion 10-- MODULO DE PASAJEROS
	Estructura de Modulo, Crearemos la estructura de nuestro modelo de Pasajeros, en el postMan se creará la coleccion "api-superflights > pasajeros"

	//empezar a ver el video 38

	1 Crear el modulo de usuario
		1.1 comando "nest g mo user" , crea el modulo de usuario(user) el "user.module.ts" para nuestra entidad, 
			crea la carpeta "user", tambien lo importa en el "app.module".
		1.2 comando "nest g co user", crea el controller en nuestro modelo user, hace el import solo en nuestro "user.module".
		1.3 comando "nest g s user", crea el servicio en nuestro modelo user, hace el import solo en nuestro "user.module".  
	2 crear la interface de nuestra entidad user.
		en common > interfaces > user.interface.ts
	3 crear la clase DTO de nuestra entidad user. Los DTOs se usan para la validacion de los datos q entran a nuestra aplicacion, es decir, en los endpoints.
		en user > dto > user.dto.ts
	4 crear validaciones para los datos q ingresamos a la aplicacion
		4.1 Instalar el paquete class-validator "yarn add class-validator class-transformer".
		4.2 Agregar las restricciones de los paquete "class-validator", "class-transformer" en "user.dto.ts".
	5 hacer la configuracion global de las validaciones creadas en el paso 4.2
		ir al "main.ts" y usar useGlobalPipes();
	
	Esquema y Modelo, Crearemos nuestro schema de usuario utilizando mongoose.
		Estos schemas se usan en la capa de datos de nuestra aplicacion.
	1 Crear la carpta "schema" y el archivo "user.schema.ts" en la carpeta "user".		
	2 Crear los modelos, simplemente programamos las constantes con los nombres de los modelos o entidades.
		2.1 crear carpeta "models" y adentro "models.ts" todo eso adentro de "common".
	3 Exportar al module de user el schema creado en el paso 1.
		en el imports usamos MongooseModule.forFeatureAsyncen q importara user.schema.ts

	endPoint Crear Usuarios (POST)
	1 ir al controlador de "user.controller.ts", le configuramos la url 'api/v1/user' con el decorador @Controller
	2 instalar la libreria bcrypt para encriptar el password
		yarn add bcrypt
		2.1 ir a "user.service.ts" Crear el metodo "hashPassword()" para encriptar o hashear la contraseña.
	3 crear el metodo "create" de tipo Post en "user.controller", recibira como parametro el usuario
	4 crear el servicio "create en "user.service.ts", recibira como parametro el usuario
	5 en el "app.module" le quite el sig objeto de configuracion a la conexion de mongoDB en el import "MongooseModule.forRoot"
		{createIndex:true, finAndModify:false}
		ya q no dejaba conectarme

	endPoint Obtener Usuarios (GET)
	1 Crear el metodo "findAll()" de tipo get en el "user.controller".
	2 Crear el servicio "findAll()" q retornara los usuarios en el "user.service".
	3 probar el endpoint GET localhost:3000/api/v1/user
	
	endPoint Obtener Usuarios por Id (GET), usaremos el decorador de parametros "@Param" para obtener el valor del parametro por url
	1 Crear el metodo "findOne(id)" de tipo get q recibira un parametro en el "user.controller"
	2 Crear el metodo "findOne(id)" q recibira un parametro y q retornara el usuario encontrado en el "user.service"
	3 probar el endpoint GET localhost:3000/api/v1/user/id

	endPoint Actualizar Usuario  (PUT), usaremos el decorador de parametros "@Param" para obtener el valor del parametro por url y el decorador 
		de parametros "@Body" para obtener el objeto de tipo usuario por el request.body.
	1 Crear el metodo "update(id)" de tipo Put q recibira por parametro el id y por el body los datos a actualizar en el "user.controller"
	2 Crear el metodo "update(id)" q recibira el id y un objeto de tipo usuario con los datos a actualizar y q retornara el usuario actualizado en el "user.service"
	3 probar el endpoint PUT localhost:3000/api/v1/user/id

	endPoint Eliminar Usuario (DELETE), usaremos el decorador de parametros "@Param" para obtener el valor del parametro por url.
	1 Crear el metodo "delete(id)" de tipo Delete q recibira por parametro el id del usuario en el archivo "user.controller".
	2 Crear el metodo "delete(id)" q recibira el id del usuario y q retornara un objeto con httpStatus Ok y mensaje 'Deleted' en el archivo "user.service".
	3 probar el endpoint DELETE localhost:3000/api/v1/user/id