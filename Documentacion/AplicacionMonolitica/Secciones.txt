 --Seccion 8-- CREACION DE APLICACION MONOLITICA
	1 crear aplicacion "nest new api-superflights"
		1.1 decidí usar yarn "npm install --global yarn"
	2 crear nuestro filtro global de excepciones
		2.1 carpeta "src" crear carpetas "common" > "filters"
			crear el archivo http-exception.filter.ts
		2.2 Asignar la clase AllExceptionFilter recien creada  globalmente para todas las expeciones de las request.
			ir al "main.ts" y uasr useGlobalFilters()
	3 crear nuestro interceptor global de tiempo de espera de 2 minutos
		3.1 en carpeta "src>common" crear carpeta "interceptors" y el archivo timeout.interceptor.ts
		3.2 Asignar la clase TimeOutInterceptor recien creada de manera global para todas las request.
			ir al "main.ts" y usar useGlobalInterceptors()
 
 --Seccion 9-- CONFIGURACION DE BASE DE DATOS MONGO_DB
	1 Instalar los sig paquetes en modo desarollo
		yarn add -D mongoose
		yarn add -D mongoose-autopopulate
		yarn add -D @nestjs/mongoose
		yarn add -D @nestjs/config  -->nos sirve para cargar variables de entorno por modulos
	2 Instalar Docker, bajar la imagen "mongo" e instalar el software de MongoDB Compass para obtener la cadena de conexion.
	3 Conexion a Mongo
		3.1 crear el archivo en la raíz del proyecto para las variables de entorno ".env.development" en modo desarrollo.
			aqui ingresamos la cadena de conexion para la bd mongo. 
			la tomé del software MongoDBCompass.
		3.2 ir al archivo "app.module.ts" para agregar nuestra configuracion a la BD Mongo.
			la configuracion será en el "imports" mediante las clases:
			"ConfigModule" del paquete instalado "nestjs/config" 
			"MongooseModule" del paquete instalado "nestjs/mongoose"
 
 --Seccion 10-- MODULOS DE USUARIOS
	Estructura de Modulo, Crearemos la estructura de nuestro modelo de usuarios, en el postMan se creará la coleccion "api-superflights > users"

	1 Crear el modulo de usuario
		1.1 comando "nest g mo user" , crea el modulo de usuario(user) el "user.module.ts" para nuestra entidad, 
			crea la carpeta "user", tambien lo importa en el "app.module".
		1.2 comando "nest g co user", crea el controller en nuestro modulo user, hace el import solo en nuestro "user.module".
		1.3 comando "nest g s user", crea el servicio en nuestro modulo user, hace el import solo en nuestro "user.module".  
	2 crear la interface de nuestra entidad user.
		en common > interfaces > user.interface.ts
	3 crear la clase DTO de nuestra entidad user. Los DTOs se usan para la validacion de los datos q entran a nuestra aplicacion, es decir, en los endpoints.
		en user > dto > user.dto.ts
	4 crear validaciones para los datos q ingresamos a la aplicacion
		4.1 Instalar el paquete class-validator "yarn add class-validator class-transformer".
		4.2 Agregar las restricciones de los paquete "class-validator", "class-transformer" en "user.dto.ts".
	5 hacer la configuracion global de las validaciones creadas en el paso 4.2
		ir al "main.ts" y usar useGlobalPipes();
	
	Esquema y Modelo, Crearemos nuestro schema de usuario utilizando mongoose.
		Estos schemas se usan en la capa de datos de nuestra aplicacion.
	1 Crear la carpta "schema" y el archivo "user.schema.ts" en la carpeta "user".		
	2 Crear los modelos, simplemente programamos las constantes con los nombres de los modelos o entidades.
		2.1 crear carpeta "models" y adentro "models.ts" todo eso adentro de "common".
	3 Exportar al module de user el schema creado en el paso 1.
		en el imports usamos MongooseModule.forFeatureAsync q importara user.schema.ts

	endPoint Crear Usuarios (POST)
	1 ir al controlador de "user.controller.ts", le configuramos la url 'api/v1/user' con el decorador @Controller
	2 instalar la libreria bcrypt para encriptar el password
		yarn add bcrypt
		2.1 ir a "user.service.ts" Crear el metodo "hashPassword()" para encriptar o hashear la contraseña.
	3 crear el metodo "create" de tipo Post en "user.controller", recibira como parametro el usuario
	4 crear el servicio "create en "user.service.ts", recibira como parametro el usuario
	5 en el "app.module" le quite el sig objeto de configuracion a la conexion de mongoDB en el import "MongooseModule.forRoot"
		{createIndex:true, finAndModify:false}
		ya q no dejaba conectarme

	endPoint Obtener Usuarios (GET)
	1 Crear el metodo "findAll()" de tipo get en el "user.controller".
	2 Crear el servicio "findAll()" q retornara los usuarios en el "user.service".
	3 probar el endpoint GET localhost:3000/api/v1/user
	
	endPoint Obtener Usuarios por Id (GET), usaremos el decorador de parametros "@Param" para obtener el valor del parametro por url
	1 Crear el metodo "findOne(id)" de tipo get q recibira un parametro en el "user.controller"
	2 Crear el metodo "findOne(id)" q recibira un parametro y q retornara el usuario encontrado en el "user.service"
	3 probar el endpoint GET localhost:3000/api/v1/user/id

	endPoint Actualizar Usuario  (PUT), usaremos el decorador de parametros "@Param" para obtener el valor del parametro por url y el decorador 
		de parametros "@Body" para obtener el objeto de tipo usuario por el request.body.
	1 Crear el metodo "update(id)" de tipo Put q recibira por parametro el id y por el body los datos a actualizar en el "user.controller"
	2 Crear el metodo "update(id)" q recibira el id y un objeto de tipo usuario con los datos a actualizar y q retornara el usuario actualizado en el "user.service"
	3 probar el endpoint PUT localhost:3000/api/v1/user/id

	endPoint Eliminar Usuario (DELETE), usaremos el decorador de parametros "@Param" para obtener el valor del parametro por url.
	1 Crear el metodo "delete(id)" de tipo Delete q recibira por parametro el id del usuario en el archivo "user.controller".
	2 Crear el metodo "delete(id)" q recibira el id del usuario y q retornara un objeto con httpStatus Ok y mensaje 'Deleted' en el archivo "user.service".
	3 probar el endpoint DELETE localhost:3000/api/v1/user/id