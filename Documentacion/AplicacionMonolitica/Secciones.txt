 --Seccion 8-- CREACION DE APLICACION MONOLITICA
	1 crear aplicacion "nest new api-superflights"
		decidí usar yarn "npm install --global yarn"
	2 crear nuestro filtro global de excepciones
		2.1 carpeta "src" crear carpetas "common" > "filters"
			crear el archivo http-exception.filter.ts
		2.2 Asignar la clase AllExceptionFilter recien creada  globalmente para todas las expeciones de las request.
			ir al "main.ts" y uasr useGlobalFilters()
	3 crear nuestro interceptor global de tiempo de espera de 2 minutos
		3.1 en carpeta "src>common" crear carpeta "interceptors" y el archivo timeout.interceptor.ts
		3.2 Asignar la clase TimeOutInterceptor recien creada de manera global para todas las request.
			ir al "main.ts" y usar useGlobalInterceptors()
 
 --Seccion 9-- CONFIGURACION DE BASE DE DATOS MONGO_DB
	1 Instalar los sig paquetes en modo desarollo
		yarn add -D mongoose
		yarn add -D mongoose-autopopulate
		yarn add -D @nestjs/mongoose
		yarn add -D @nestjs/config
	2 Conexion a Mongo
		2.1 crear el archivo en la raíz del proyecto para las variables de entorno ".env.development" en modo desarrollo.
			aqui ingresamos la cadena de conexion para la bd mongo.
		2.2 ir al archivo "app.module.ts" para agregar nuestra configuracion a la BD Mongo.
			la configuracion será en el "imports" mediante las clases:
			"ConfigModule" del paquete instalado "nestjs/config" 
			"MongooseModule" del paquete instalado "nestjs/mongoose"
 
 --Seccion 10-- MODULOS DE USUARIOS
	Estructura de Modulo, Crearemos la estructura de nuestro modelo de usuarios
	1 Crear el modulo de usuario
		1.1 comando "nest g mo user" , crea el modulo de usuario(user) el "user.module.ts" para nuestra entidad, 
			crea la carpeta "user", tambien lo importa en el "app.module".
		1.2 comando "nest g co user", crea el controller en nuestro modelo user, hace el import solo en nuestro "user.module".
		1.3 comando "nest g s user", crea el servicio en nuestro modelo user, hace el import solo en nuestro "user.module".  
	2 crear la interface de nuestra entidad user.
		en common > interfaces > user.interface.ts
	3 crear la clase DTO de nuestra entidad user. Los DTOs se usan para la validacion de los datos q entran a nuestra aplicacion, es decir, en los endpoints.
		en user > dto > user.dto.ts
	4 crear validaciones para los datos q ingresamos a la aplicacion
		4.1 Instalar el paquete class-validator "yarn add class-validator class-transformer".
		4.2 Agregar las restricciones de los paquete "class-validator", "class-transformer" en "user.dto.ts".
	5 hacer la configuracion global de las validaciones creadas en el paso 4.2
		ir al "main.ts" y usar useGlobalPipes();
	
	Esquema y Modelo, Crearemos nuestro schema de usuario utilizando mongoose.
		Estos schemas se usan en la capa de datos de nuestra aplicacion.
	1 Crear la carpta "schema" y el archivo "user.schema.ts" en la carpeta "user".		
	2 Crear los modelos, simplemente programamos las constantes con los nombres de los modelos o entidades.
		2.1 crear carpeta "models" y adentro "models.ts" todo eso adentro de "common".
	3 Exportar al module de user el schema creado en el paso 1.
		en el imports usamos MongooseModule.forFeatureAsyncen q importara user.schema.ts

	Crear endPoint para crear Usuarios
	1 ir al controlador de "user.controller.ts", le configuramos la url 'api/v1/user'
	2 crear el metodo "create" de tipo Post, recibira como parametro el usuario
	3 crear el servicio "create", recibira como parametro el usuario
	4 instalar la libreria crypt para encriptar el password
		yarn add bcrypt
	5 ME QUEDE EN LA INSTALACION DE LA LIBRERRIA BCRUPT